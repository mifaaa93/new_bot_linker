from telebot import types
from bot.models import User, Link, BaseTable



def get_or_create(tg_user: types.User) -> User:
    '''
    —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —é–∑–µ—Ä–∞
    –µ—Å–ª–∏ —é–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Ç–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –µ–≥–æ
    '''
    user_id = tg_user.id
    user_name = tg_user.username
    first_name = tg_user.first_name
    last_name = tg_user.last_name

    user, now_create = User.objects.get_or_create(
        user_id=user_id,
        defaults={
            "user_name": user_name,
            "first_name": first_name,
            "last_name": last_name,
        })
    
    if not now_create and (
        user.user_name != user_name or
        user.first_name != first_name):
        
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è —Ä–∞–Ω–µ–µ, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ(–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        user.user_name = user_name
        user.first_name = first_name
        user.save(update_fields=["user_name", "first_name",])
    
    return user


def get_or_create_link(link: types.ChatInviteLink) -> Link:
    '''
    —Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
    '''
    invite_link = link.invite_link
    name = link.name

    chat_link, now_create = Link.objects.get_or_create(
        invite_link=invite_link,
        name=name,
        )
    
    return chat_link


def add_to_base_table(user: User, link: Link) -> BaseTable:
    '''
    –≤–Ω–æ—Å–∏–º –≤ –±–∞–∑—É —á—Ç–æ —é–∑–µ—Ä –≤—Å—Ç—É–ø–∏–ª –≤ –∫–∞–Ω–∞–ª
    '''
    bt = BaseTable(user=user, link=link)
    bt.save()
    
    return bt


def get_user_by_username_or_id(user_name_or_id: str) -> User:
    '''
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —é–∑–µ—Ä–∞ –ø–æ –µ–≥–æ –∞–π–¥–∏ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º—É
    '''
    if not user_name_or_id:
        return None
    user = None
    try:
        if user_name_or_id.isnumeric():
            user_id = int(user_name_or_id)
            user = User.objects.get(user_id=user_id)
        else:
            user_name = user_name_or_id.replace("@", '')
            user = User.objects.get(user_name=user_name)
    except Exception as e:
        pass
    return user


def turn_on_write(user: User) -> None:
    '''
    –æ—Ç–º–µ—á–∞–µ–º —á—Ç–æ —é–∑–µ—Ä –Ω–∞–ø–∏—Å–∞–ª –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ
    '''
    if not BaseTable.objects.filter(user=user, write=True).exists():
        last_row = BaseTable.objects.filter(user=user).last()
        if last_row is not None:
            last_row.make_write(True)


def turn_off_write(user: User) -> None:
    '''
    '''
    rows = BaseTable.objects.filter(user=user)
    for row in rows:
        row.make_write(False)



def turn_on_join_VIP(user: User) -> None:
    '''
    –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å–ª–∏ –≤—Å—Ç—É–ø–∏–ª –≤ –≤–∏–ø –µ—â–µ –Ω–µ—Ç—É —Ç–æ –æ—Ç–º–µ—á–∞–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç–µ
    '''
    if not BaseTable.objects.filter(user=user, join_chat=True).exists():
        last_row = BaseTable.objects.filter(user=user).last()
        if last_row is not None:
            last_row.make_join_VIP(True)


def turn_off_join_VIP(user: User) -> None:
    '''
    '''
    rows = BaseTable.objects.filter(user=user)
    for row in rows:
        row.make_join_VIP(False)


def confirm(task: int, users: set[str]) -> int:
    '''
    –µ—Å–ª–∏ task == 1 –æ–±–Ω–æ–≤–ª—è–µ–º –≤–æ–∑–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ —Å —é–∑–µ—Ä–æ–º, —á—Ç–æ –æ–Ω –Ω–∞–ø–∏—Å–∞–ª
    –µ—Å–ª–∏ task == 2 –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ–∑–¥–µ –¥–ª—è —é–∑–µ—Ä–∞ —á—Ç–æ –æ–Ω –≤—Å—Ç—É–ø–∏–ª –≤ –í–ò–ü
    –µ—Å–ª–∏ task == 3 –æ–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è —é–∑–µ—Ä–∞ —á—Ç–æ –æ–Ω –Ω–∞–ø–∏—Å–∞–ª False
    –µ—Å–ª–∏ task == 4 –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ–∑–¥–µ –¥–ª—è —é–∑–µ—Ä–∞ —á—Ç–æ –æ–Ω –≤—Å—Ç—É–ø–∏–ª –≤ –í–ò–ü False
    '''
    counter = 0
    for user_name_or_id in users:
        user = get_user_by_username_or_id(user_name_or_id)
        if user is not None:
            if task == 1:
                turn_on_write(user)
            elif task == 2:
                turn_on_join_VIP(user)
            elif task == 3:
                turn_off_write(user)
            elif task == 4:
                turn_off_join_VIP(user)
                
            counter += 1
    
    return counter


def count_users(users: set[str]) -> str:
    '''
    '''
    res = ''
    for user_name_or_id in users:
        user = get_user_by_username_or_id(user_name_or_id)
        if user is not None:
            counter = BaseTable.objects.filter(user=user).count()
            res += f"{user_name_or_id} - {counter}\n"
        else:
            res += f"{user_name_or_id} - ‚ùå\n"
    return res


def status_users(users: set[str]) -> str:
    '''
    '''
    res = ''
    for user_name_or_id in users:
        user = get_user_by_username_or_id(user_name_or_id)
        if user is None:
            res += f"{user_name_or_id} - ‚ùå\n"
        else:
            w, v = 'üí§', 'üí§'
            bases = BaseTable.objects.filter(user=user)
            for b in bases:
                if b.write:
                    w = "üìù"
                if b.join_chat:
                    v = "‚úÖ"
            res += f"{user_name_or_id} - {w} {v}\n"
    return res



def username_users(users: set[str]) -> str:
    base_counter = 0
    no_base_counter = 0
    double_counter = 0
    all_unique_counter = 0
    base_text = ''
    no_base_text = ''
    double_text = ''
    for user_name_or_id in users:
        user = get_user_by_username_or_id(user_name_or_id)
        if user is None:
            no_base_text += f"{user_name_or_id} - ‚ùå\n"
            no_base_counter += 1
        else:
            base_counter += 1
            bases = BaseTable.objects.filter(user=user).order_by('-date')
            is_double = bases.count() > 1
            if is_double:
                double_counter += 1
            for i, b in enumerate(bases):
                all_unique_counter += 1
                if i == 0:
                    base_text += f"{b.to_text_usernames}\n"
                if is_double:
                    double_text += f"{b.to_text_usernames}\n"


    res = base_text + "\n"
    res += no_base_text + "\n"
    res += double_text + "\n"
    res += f"<b>–í—Å–µ–≥–æ: –£-{all_unique_counter}  –ë-{base_counter} –î-{double_counter} –ù-{no_base_counter}</b>"

    
    return res

def names_users(users: set[str]) -> str:
    base_counter = 0
    no_base_counter = 0
    double_counter = 0
    all_unique_counter = 0
    base_text = ''
    no_base_text = ''
    double_text = ''
    for user_name_or_id in users:
        user = get_user_by_username_or_id(user_name_or_id)
        if user is None:
            no_base_text += f"{user_name_or_id} - ‚ùå\n"
            no_base_counter += 1
        else:
            base_counter += 1
            bases = BaseTable.objects.filter(user=user).order_by('-date')
            is_double = bases.count() > 1
            if is_double:
                double_counter += 1
            for i, b in enumerate(bases):
                all_unique_counter += 1
                if i == 0:
                    base_text += f"{b.to_text_names}\n"
                if is_double:
                    double_text += f"{b.to_text_names}\n"


    res = base_text + "\n"
    res += no_base_text + "\n"
    res += double_text + "\n"
    res += f"<b>–í—Å–µ–≥–æ: –£-{all_unique_counter}  –ë-{base_counter} –î-{double_counter} –ù-{no_base_counter}</b>"

    
    return res

def links_users(users: set[str]) -> str:
    '''
    22/12/25 6150900683 –ó–∞–∫—É–ø 23 (–≤—ã–¥–∞–≤–∞—Ç—å –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑—É)
    22/12/25 1036256165 –ó–∞–∫—É–ø 23
    22/12/25 5975061736 –ó–∞–∫—É–ø 7 
    22/12/25 1150564331 (–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–æ–µ)  
    22/12/25 1767256906 –ó–∞–∫—É–ø 124
    22/12/25 5761561503 (–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–æ–µ) 

    1434423803 - ‚ùå (–Ω–µ—Ç –≤ –±–∞–∑–µ)

    (–Ω–∏–∂–µ –∏–¥—É—Ç –¥—É–±–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ –±–∞–∑–µ, –Ω–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –ø—Ä–æ—Å—Ç–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –ø–æ—Å–ª–µ —Ç–µ—Ö –∫–æ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ) 
    22/12/25 6150900683 –ó–∞–∫—É–ø 23
    10/10/22 6150900683 –ó–∞–∫—É–ø 23
    03/07/25 6150900683 –ó–∞–∫—É–ø 23

    <b>–í—Å–µ–≥–æ: –£-7 (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)  –ë-6 (–ø–æ –±–∞–∑–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ) –î-1 (–¥—É–±–ª–∏) –ù-1 (–Ω–µ—Ç –≤ –±–∞–∑–µ)
    '''
    base_counter = 0
    no_base_counter = 0
    double_counter = 0
    all_unique_counter = 0
    base_text = ''
    no_base_text = ''
    double_text = ''
    for user_name_or_id in users:
        user = get_user_by_username_or_id(user_name_or_id)
        if user is None:
            no_base_text += f"{user_name_or_id} - ‚ùå\n"
            no_base_counter += 1
        else:
            base_counter += 1
            bases = BaseTable.objects.filter(user=user).order_by('-date')
            is_double = bases.count() > 1
            if is_double:
                double_counter += 1
            for i, b in enumerate(bases):
                all_unique_counter += 1
                if i == 0:
                    base_text += f"{b.to_text_links}\n"
                if is_double:
                    double_text += f"{b.to_text_links}\n"


    res = base_text + "\n"
    res += no_base_text + "\n"
    res += double_text + "\n"
    res += f"<b>–í—Å–µ–≥–æ: –£-{all_unique_counter}  –ë-{base_counter} –î-{double_counter} –ù-{no_base_counter}</b>"

    
    return res